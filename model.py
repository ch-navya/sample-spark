from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, Boolean, ForeignKey,TEXT,TIMESTAMP
from sqlalchemy.orm import relationship

Base = declarative_base()

class Repository(Base):
    __tablename__ = 'item'
    id = Column(Integer, primary_key=True) 
    node_id = Column(TEXT, nullable=False)
    name = Column(TEXT, nullable=False)
    full_name = Column(TEXT, nullable=False)
    private = Column(Boolean, nullable=False)
    html_url = Column(TEXT, nullable=False)
    description = Column(TEXT, nullable=False)
    fork = Column(Boolean, nullable=False)
    url = Column(TEXT, nullable=False)
    forks_url = Column(TEXT, nullable=False)
    keys_url = Column(TEXT, nullable=False)
    collaborators_url = Column(TEXT, nullable=False)
    teams_url = Column(TEXT, nullable=False)
    hooks_url = Column(TEXT, nullable=False)
    issue_events_url = Column(TEXT, nullable=False)
    events_url = Column(TEXT, nullable=False)
    assignees_url = Column(TEXT, nullable=False)
    branches_url = Column(TEXT, nullable=False)
    tags_url = Column(TEXT, nullable=False)
    blobs_url = Column(TEXT, nullable=False)
    git_tags_url = Column(TEXT, nullable=False)
    git_refs_url = Column(TEXT, nullable=False)
    trees_url = Column(TEXT, nullable=False)
    statuses_url = Column(TEXT, nullable=False)
    languages_url = Column(TEXT, nullable=False)
    stargazers_url = Column(TEXT, nullable=False)
    contributors_url = Column(TEXT, nullable=False)
    subscribers_url = Column(TEXT, nullable=False)
    subscription_url = Column(TEXT, nullable=False)
    commits_url = Column(TEXT, nullable=False)
    git_commits_url = Column(TEXT, nullable=False)
    comments_url = Column(TEXT, nullable=False)
    issue_comment_url = Column(TEXT, nullable=False)
    contents_url = Column(TEXT, nullable=False)
    compare_url = Column(TEXT, nullable=False)
    merges_url = Column(TEXT, nullable=False)
    archive_url = Column(TEXT, nullable=False)
    downloads_url = Column(TEXT, nullable=False)
    issues_url = Column(TEXT, nullable=False)
    pulls_url = Column(TEXT, nullable=False)
    milestones_url = Column(TEXT, nullable=False)
    notifications_url = Column(TEXT, nullable=False)
    labels_url = Column(TEXT, nullable=False)
    releases_url = Column(TEXT, nullable=False)
    deployments_url = Column(TEXT, nullable=False)
    created_at = Column(TIMESTAMP, nullable=False)
    updated_at= Column(TIMESTAMP, nullable=False)
    pushed_at = Column(TIMESTAMP, nullable=False)
    git_url = Column(TEXT, nullable=False)
    ssh_url = Column(TEXT, nullable=False)
    clone_url = Column(TEXT, nullable=False)
    svn_url = Column(TEXT, nullable=False)
    homepage = Column(TEXT, nullable=False)
    size = Column(Integer)
    stargazers_count = Column(TEXT, nullable=False)
    watchers_count = Column(TEXT, nullable=False)
    language= Column(TEXT, nullable=False)
    has_issues = Column(Boolean, nullable=False)
    has_projects = Column(Boolean, nullable=False)
    has_downloads= Column(Boolean, nullable=False)
    has_wiki = Column(Boolean, nullable=False)
    has_pages = Column(Boolean, nullable=False)
    has_discussions= Column(Boolean, nullable=False)
    forks_count = Column(Integer)
    mirror_url= Column(TEXT, nullable=False)
    archived= Column(Boolean, nullable=False)
    disabled= Column(Boolean, nullable=False)
    open_issues_count= Column(Integer)
    allow_forking= Column(Boolean, nullable=False)
    is_template= Column(Boolean, nullable=False)
    web_commit_signoff_required= Column(Boolean, nullable=False)
    visibility= Column(TEXT, nullable=False)
    forks= Column(Integer, nullable=False)
    open_issues= Column(Boolean,nullable=False)
    watchers= Column(TEXT)
    default_branch= Column(TEXT, nullable=False)
    score= Column(Integer)
    topics= Column(TEXT, nullable=False)
    license1_id = Column(Integer, ForeignKey("license.id"), nullable=False)
    license = relationship("License", foreign_keys='Repository.license1_id')
    owner1_id = Column(Integer,ForeignKey("owner.id"), nullable=False)
    owner = relationship("Owner",foreign_keys='Repository.owner1_id')

    def __repr__(self):
        return "<Repository( id={},node_id='{}', name='{}', fullname='{}', private={},html_url='{}',description='{}',fork={},url='{}',forks_url='{}',keys_url='{}',collaborators_url='{}',teams_url='{}',hooks_url='{}',issue_events_url='{}',events_url='{}',assignees_url='{}',branches_url='{}',tags_url='{}',blobs_url='{}',git_tags_url='{}',git_refs_url='{}',trees_url='{}',statuses_url='{}',languages_url='{}',stargazers_url='{}',contributors_url='{}',subscribers_url='{}',subscription_url='{}',commits_url='{}',git_commits_url='{}',comments_url='{}',issue_comment_url='{}',contents_url='{}',compare_url='{}',merges_url='{}',archive_url='{}',downloads_url='{}',issues_url='{}',pulls_url='{}',milestones_url='{}',notifications_url='{}',labels_url='{}',releases_url='{}',deployments_url='{}',created_at={},updated_at={},pushed_at={},git_url='{}',ssh_url='{}',clone_url='{}',svn_url='{}',homepage='{}',size={},stargazers_count={},watchers_count={},language='{}',has_issues={},has_projects={},has_downloads={},has_wiki={},has_pages={},has_discussions={},forks_count={},mirror_url='{}',archived={},disabled={},open_issues_count={},allow_forking={},is_template={},web_commit_signoff_required={},visibility='{}',forks={},open_issues={},watchers={},default_branch='{}',score={},topics='{}',owner_id={}, id={})>"\
            .format(self.item_id,self.id, self.node_id, self.name, self.full_name, self.private,self.html_url,self.description,self.fork,self.url,self.forks_url,self.keys_url,self.collaborators_url,self.teams_url,self.hooks_url,self.issue_events_url,self.assignees_url,self.branches_url,self.tags_url,self.blobs_url,self.git_tags_url,self.git_refs_url,self.trees_url,self.statuses_url,self.languages_url,self.stargazers_url,self.contributors_url,self.subscribers_url,self.subscription_url,self.commits_url,self.git_commits_url,self.comments_url,self.issue_comment_url,self.contents_url,self.compare_url,self.merges_url,self.archive_url,self.downloads_url,self.issues_url,self.pulls_url,self.milestones_url,self.notifications_url,self.labels_url,self.releases_url,self.deployments_url,self.created_at,self.updated_at,self.pushed_at,self.git_url,self.ssh_url,self.clone_url,self.svn_url,self.homepage,self.size,self.stargazers_count,self.watchers_count,self.language,self.has_issues,self.has_projects,self.has_downloads,self.has_wiki,self.has_pages,self.has_discussions,self.forks_count,self.mirror_url,self.archived,self.disabled,self.open_issues_count,self.allow_forking,self.is_template,self.web_commit_signoff_required,self.visibility,self.forks,self.open_issues,self.watchers,self.default_branch,self.score,self.topics,self.owner_id,self.id)

class License(Base):
    __tablename__ = 'license'
    id = Column(Integer, primary_key=True)
    key = Column(TEXT, nullable=False)
    name = Column(TEXT, nullable=False)
    spdx_id = Column(TEXT, nullable=False)
    node_id = Column(TEXT, nullable=False)
    url = Column(TEXT)

    def __repr__(self):
        return "<License(id={}, node_id='{}', name='{}', key='{}', spdx_id={}, node_id={}, url={})>"\
                .format(self.id, self.node_id, self.name, self.key, self.spdx_id, self.node_id, self.url)
class Owner(Base):
    __tablename__ = 'owner'
    id = Column(Integer, primary_key=True)
    login = Column(TEXT, nullable=False)
    owner_id  =  Column(Integer, nullable=False)
    node_id = Column(TEXT, nullable=False)
    avatar_url = Column(TEXT, nullable=False)
    gravatar_id = Column(TEXT, nullable=False)
    url = Column(TEXT, nullable=False)
    html_url = Column(TEXT, nullable=False)
    followers_url = Column(TEXT, nullable=False)
    following_url = Column(TEXT, nullable=False)
    gists_url = Column(TEXT, nullable=False)
    starred_url = Column(TEXT, nullable=False)
    subscriptions_url = Column(TEXT, nullable=False)
    organizations_url = Column(TEXT, nullable=False)
    repos_url = Column(TEXT, nullable=False)
    events_url = Column(TEXT, nullable=False)
    received_events_url = Column(TEXT, nullable=False)
    type = Column(TEXT, nullable=False)
    site_admin = Column(Boolean, nullable=False)

    def __repr__(self):
        return "<owner(id={}, login='{}', owner_id='{}', node_id='{}', avatar_url={}, gravatar_id={}, url={},html_url={},followers_url={},following_url={},gists_url={},starred_url={},subscriptions_url={},organizations_url={},repos_url={},events_url={},received_events_url={},type={},site_admin={})>"\
                .format(self.id, self.login, self.owner_id, self.node_id, self.avatar_url, self.gravatar_id, self.url,self.html_url,self.followers_url,self.following_url,self.gists_url,self.starred_url,self.subscriptions_url,self.organizations_url,self.repos_url,self.events_url,self.received_events_url,self.type,self.site_admin)
                